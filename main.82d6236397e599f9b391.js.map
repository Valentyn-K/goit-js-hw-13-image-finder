{"version":3,"sources":["webpack:///./js/refs.js","webpack:///./js/clearUlGallery.js","webpack:///./js/apiService.js","webpack:///./js/makeGridItem.js","webpack:///./js/masonry.js","webpack:///./js/drawMarkup.js","webpack:///./js/spiner.js","webpack:///./js/infiniteScrollWithIntersectionObserver.js","webpack:///./js/fetchForInfiniteScroll.js","webpack:///./js/eventListeners.js","webpack:///./js/handleInputSearchQuery.js"],"names":["refs","searchForm","document","querySelector","ulGallery","loadMoreBtn","spiner","liGridSizer","ioTarget","clearUlGallery","innerHTML","page","query","fetchImages","requestParams","this","fetch","then","response","json","parsedResponse","incrementPage","hits","string","resetPage","makeGridItem","webformatURL","likes","views","comments","downloads","li","createElement","classList","add","divPhotoCard","img","src","divStats","pLikes","textContent","iLikes","appendChild","pViews","iViews","pComment","iComment","pDowload","iDowload","append","masonryInstance","Masonry","itemSelector","columnWidth","percentPosition","gutter","transitionDuration","drawMarkup","imagesArray","images","map","appended","imagesLoaded","on","layout","show","remove","hide","infiniteScroll","target","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","services","console","log","rootMargin","threshold","observe","addEventListener","debounce","event","inputValue","value","length","searchQuery","catch","error"],"mappings":"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","file":"main.82d6236397e599f9b391.js","sourcesContent":["export const refs = {\r\n  searchForm: document.querySelector('#search-form'),\r\n  ulGallery: document.querySelector('#gallery'),\r\n  loadMoreBtn: document.querySelector('#load-more'),\r\n  spiner: document.querySelector('.spiner'),\r\n  liGridSizer: document.querySelector('.grid-sizer'),\r\n  ioTarget: document.querySelector('#intersection-observer-target'),\r\n};\r\n\r\n// console.dir(refs.intersectionObserverTarget);\r\n// console.dir(refs.ulGallery);\r\n// console.log(refs.searchForm.query.value);\r\n","import { refs } from './refs.js';\r\n\r\nexport function clearUlGallery() {\r\n  refs.ulGallery.innerHTML = '';\r\n}\r\n","const baseUrl = 'https://pixabay.com/api/';\r\n\r\nexport default {\r\n  page: 1,\r\n  query: '',\r\n  fetchImages() {\r\n    const requestParams = `?image_type=photo&orientation=horizontal&q=${this.query}&page=${this.page}&per_page=12&key=15837694-cfd882bdab50e7e30ec0ef461`;\r\n\r\n    return fetch(baseUrl + requestParams)\r\n      .then(response => response.json())\r\n      .then(parsedResponse => {\r\n        this.incrementPage();\r\n\r\n        return parsedResponse.hits;\r\n      });\r\n  },\r\n  incrementPage() {\r\n    this.page += 1;\r\n  },\r\n  get searchQuery() {\r\n    return this.query;\r\n  },\r\n  set searchQuery(string) {\r\n    this.query = string;\r\n  },\r\n  resetPage() {\r\n    this.page = 1;\r\n  },\r\n};\r\n","const makeGridItem = ({ webformatURL, likes, views, comments, downloads }) => {\r\n  const li = document.createElement('li');\r\n  li.classList.add('grid-item');\r\n  li.classList.add('gallery-item');\r\n\r\n  const divPhotoCard = document.createElement('div');\r\n  divPhotoCard.classList.add('photo-card');\r\n\r\n  const img = document.createElement('img');\r\n  img.classList.add('image');\r\n  img.src = webformatURL;\r\n\r\n  const divStats = document.createElement('div');\r\n  divStats.classList.add('stats');\r\n\r\n  const pLikes = document.createElement('p');\r\n  pLikes.classList.add('stats-item');\r\n  pLikes.textContent = likes;\r\n\r\n  const iLikes = document.createElement('i');\r\n  iLikes.classList.add('material-icons');\r\n  iLikes.textContent = 'thumb_up';\r\n\r\n  pLikes.appendChild(iLikes);\r\n\r\n  const pViews = document.createElement('p');\r\n  pViews.classList.add('stats-item');\r\n  pViews.textContent = views;\r\n\r\n  const iViews = document.createElement('i');\r\n  iViews.classList.add('material-icons');\r\n  iViews.textContent = 'visibility';\r\n\r\n  pViews.appendChild(iViews);\r\n\r\n  const pComment = document.createElement('p');\r\n  pComment.classList.add('stats-item');\r\n  pComment.textContent = comments;\r\n\r\n  const iComment = document.createElement('i');\r\n  iComment.classList.add('material-icons');\r\n  iComment.textContent = 'comment';\r\n\r\n  pComment.appendChild(iComment);\r\n\r\n  const pDowload = document.createElement('p');\r\n  pDowload.classList.add('stats-item');\r\n  pDowload.textContent = downloads;\r\n\r\n  const iDowload = document.createElement('i');\r\n  iDowload.classList.add('material-icons');\r\n  iDowload.textContent = 'cloud_download';\r\n\r\n  pDowload.appendChild(iDowload);\r\n\r\n  divStats.append(pLikes, pViews, pComment, pDowload);\r\n\r\n  divPhotoCard.append(img, divStats);\r\n\r\n  li.appendChild(divPhotoCard);\r\n\r\n  return li;\r\n};\r\nexport default makeGridItem;\r\n","import Masonry from 'masonry-layout';\r\nimport imagesLoaded from 'imagesloaded';\r\nimport '../css/masonry.css';\r\nimport { refs } from './refs.js';\r\n\r\nexport const masonryInstance = new Masonry('#gallery', {\r\n  itemSelector: '.grid-item',\r\n  columnWidth: refs.liGridSizer,\r\n  percentPosition: true,\r\n  gutter: 10,\r\n  transitionDuration: '0.8s',\r\n});\r\n","import Masonry from 'masonry-layout';\r\nimport imagesLoaded from 'imagesloaded';\r\n\r\nimport { refs } from './refs';\r\nimport { clearUlGallery } from './clearUlGallery.js';\r\nimport makeGridItem from './makeGridItem.js';\r\nimport { masonryInstance } from './masonry.js';\r\n\r\nexport function drawMarkup(imagesArray) {\r\n  // clearUlGallery();\r\n  const images = imagesArray.map(makeGridItem);\r\n  refs.ulGallery.append(...images);\r\n\r\n  masonryInstance.appended(images);\r\n  const imagesLoadedInstance = imagesLoaded(refs.ulGallery);\r\n\r\n  imagesLoadedInstance.on('progress', () => {\r\n    masonryInstance.layout();\r\n  });\r\n}\r\n","import { refs } from './refs.js';\r\nexport default {\r\n  show() {\r\n    refs.spiner.classList.remove('spiner-hidden');\r\n  },\r\n\r\n  hide() {\r\n    refs.spiner.classList.add('spiner-hidden');\r\n  },\r\n};\r\n","import 'intersection-observer';\r\nimport { refs } from './refs.js';\r\nimport { fetchForInfiniteScroll } from './fetchForInfiniteScroll.js';\r\n\r\nexport const infiniteScroll = target => {\r\n  const options = {\r\n    rootMargin: '300px 0px',\r\n    threshold: 0.01,\r\n  };\r\n  const io = new IntersectionObserver((entries, observer) => {\r\n    entries.forEach(entry => {\r\n      if (entry.isIntersecting) {\r\n        fetchForInfiniteScroll();\r\n      }\r\n    });\r\n  }, options);\r\n  io.observe(target);\r\n};\r\n","import services from './apiService.js';\r\nimport { drawMarkup } from './drawMarkup.js';\r\nimport spiner from './spiner.js';\r\n\r\nexport function fetchForInfiniteScroll() {\r\n  spiner.show();\r\n  services.fetchImages().then(imagesArray => {\r\n    console.log(imagesArray);\r\n    drawMarkup(imagesArray);\r\n    spiner.hide();\r\n  });\r\n}\r\n","import { refs } from './refs.js';\r\nimport { handleInputSearchQuery } from './handleInputSearchQuery.js';\r\nimport debounce from 'lodash/debounce.js';\r\n\r\nexport const formInputListener = refs.searchForm.addEventListener(\r\n  'input',\r\n  debounce(handleInputSearchQuery, 500),\r\n);\r\n","import { refs } from './refs.js';\r\nimport { clearUlGallery } from './clearUlGallery.js';\r\nimport services from './apiService.js';\r\nimport { drawMarkup } from './drawMarkup.js';\r\nimport spiner from './spiner.js';\r\nimport { infiniteScroll } from './infiniteScrollWithIntersectionObserver.js';\r\n\r\nexport function handleInputSearchQuery(event) {\r\n  clearUlGallery();\r\n  services.resetPage();\r\n  const inputValue = event.target.value;\r\n  if (inputValue.length === 0) {\r\n    clearUlGallery();\r\n    return;\r\n  }\r\n  services.searchQuery = inputValue;\r\n  spiner.show();\r\n\r\n  services\r\n    .fetchImages()\r\n    .then(imagesArray => {\r\n      // console.log(imagesArray);\r\n      drawMarkup(imagesArray);\r\n      spiner.hide();\r\n    })\r\n    .catch(error => {\r\n      spiner.hide();\r\n      console.log('Something went wrong!', error);\r\n    });\r\n\r\n  infiniteScroll(refs.ioTarget);\r\n}\r\n"],"sourceRoot":""}